import os
import telebot
import openai

# Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“õ—Ç–∞—Ä—ã –º–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä—ã
quizzes = {}
user_state = {}

# /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
        "–°”ô–ª–µ–º! üåü\n"
        "–°—ñ–∑ —Ç–∞“õ—ã—Ä—ã–ø –±–µ—Ä—Å–µ“£—ñ–∑, –º–µ–Ω —Å–æ–ª –±–æ–π—ã–Ω—à–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –∂–∞—Å–∞–π–º—ã–Ω.\n"
        "–¢–∞“õ—ã—Ä—ã–ø—Ç—ã –∂–∞–∑—É “Ø—à—ñ–Ω: /topic <—Ç–µ–º–∞>\n"
        "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞–Ω—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω: /quiz")

# /topic ‚Äì —Ç–∞“õ—ã—Ä—ã–ø –∞—Ä“õ—ã–ª—ã —Å“±—Ä–∞“õ –∂–∞—Å–∞—É
@bot.message_handler(commands=['topic'])
def topic_handler(message):
    topic = message.text.replace("/topic", "").strip()
    if not topic:
        bot.send_message(message.chat.id, "–¢–∞“õ—ã—Ä—ã–ø—Ç—ã –∂–∞–∑—É –∫–µ—Ä–µ–∫! –ú—ã—Å–∞–ª—ã: /topic “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã")
        return

    bot.send_message(message.chat.id, f"{topic} —Ç–∞“õ—ã—Ä—ã–±—ã –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –∂–∞—Å–∞–ª—É–¥–∞... ‚è≥")

    # GPT –∞—Ä“õ—ã–ª—ã —Å“±—Ä–∞“õ—Ç–∞—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Å—ã
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{
            "role": "user",
            "content": f"{topic} —Ç–∞“õ—ã—Ä—ã–±—ã–Ω–¥–∞ 5 –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å“±—Ä–∞“ì—ã–Ω –∂–∞—Å–∞, –∂–∞—É–∞–ø—Ç–∞—Ä—ã–Ω “õ–æ—Å."
        }]
    )

    text = response['choices'][0]['message']['content']

    # GPT-—Ç–µ–Ω –∞–ª—ã–Ω“ì–∞–Ω –º”ô—Ç—ñ–Ω–¥—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä –º–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä“ì–∞ –±”©–ª—É
    quizzes[message.chat.id] = parse_questions(text)
    bot.send_message(message.chat.id, "–°“±—Ä–∞“õ—Ç–∞—Ä –¥–∞–π—ã–Ω! /quiz –¥–µ–ø —Ç–µ—Ä—ñ–ø –±–∞—Å—Ç–∞—É“ì–∞ –±–æ–ª–∞–¥—ã ‚úÖ")

# /quiz ‚Äì –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–Ω—ã –±–∞—Å—Ç–∞—É
@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    if message.chat.id not in quizzes or not quizzes[message.chat.id]:
        bot.send_message(message.chat.id, "–°“±—Ä–∞“õ—Ç–∞—Ä –∂–æ“õ üòî. –ê–ª–¥—ã–º–µ–Ω /topic –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.")
        return

    user_state[message.chat.id] = 0
    send_question(message.chat.id)

# –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def send_question(chat_id):
    index = user_state[chat_id]
    user_quiz = quizzes[chat_id]
    if index < len(user_quiz):
        bot.send_message(chat_id, user_quiz[index]["question"])
    else:
        bot.send_message(chat_id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∞—è“õ—Ç–∞–ª–¥—ã! üéâ")
        user_state.pop(chat_id)

# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞—É–∞–ø—Ç–∞—Ä—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
@bot.message_handler(func=lambda m: True)
def check_answer(message):
    chat_id = message.chat.id
    if chat_id not in user_state:
        return

    index = user_state[chat_id]
    user_quiz = quizzes[chat_id]
    correct_answer = user_quiz[index]["answer"]

    if message.text.strip().lower() == correct_answer.lower():
        bot.reply_to(message, "–î“±—Ä—ã—Å! ‚úÖ")
    else:
        bot.reply_to(message, f"“ö–∞—Ç–µ üòî. –î“±—Ä—ã—Å –∂–∞—É–∞–ø: {correct_answer}")

    user_state[chat_id] += 1
    send_question(chat_id)

# GPT-—Ç–µ–Ω —à—ã“õ“õ–∞–Ω –º”ô—Ç—ñ–Ω–¥—ñ —Å“±—Ä–∞“õ/–∂–∞—É–∞–ø“õ–∞ –±”©–ª—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def parse_questions(text):
    """
    –ú—ã—Å–∞–ª—ã, GPT –∂–∞—É–∞–ø –±–µ—Ä–µ–¥—ñ:
    1. –°“±—Ä–∞“õ? –ñ–∞—É–∞–ø: ...
    2. –°“±—Ä–∞“õ? –ñ–∞—É–∞–ø: ...
    """
    result = []
    lines = text.split("\n")
    for line in lines:
        if "–ñ–∞—É–∞–ø:" in line:
            parts = line.split("–ñ–∞—É–∞–ø:")
            question = parts[0].strip()
            answer = parts[1].strip()
            result.append({"question": question, "answer": answer})
    return result

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
bot.polling()

